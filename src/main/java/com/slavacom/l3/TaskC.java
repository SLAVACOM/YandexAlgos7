//–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
//        –í—ã —Å–∫–∞–∑–∞–ª–∏:
//        def main():
//        n, k = map(int, sys.stdin.readline().split())
//        or_list = [[0, 0, 0, 0] for _ in range(n)]
//        for i in range(k):
//        x, y, z = sys.stdin.readline().split()
//        x, y, z = int(x) - 1, int(y) - 1, int(z) - 1
//        or_list[z][0] |= (1 << x)
//        or_list[z][1] |= (1 << y)
//        or_list[x][2] |= (1 << y)
//        or_list[y][3] |= (1 << x)
//
//        for i in range(n):
//        if (or_list[i][0] + 1) ^ (1 << n) and (or_list[i][1] + 1) ^ (1 << n):
//        for j in range(n):
//        if not (or_list[i][0] & (1 << j)) and not (((or_list[i][1] | or_list[j][2]) + 1) >> n):
//        t = or_list[i][1] | or_list[j][2]
//        for k in range(n):
//        if not (t & (1 << k)) and not (((or_list[i][0] | or_list[k][3]) + 1) >> n):
//        print('NO')
//        print(j + 1, k + 1, i + 1, sep=' ')
//        return
//        print('YES')
//
//
//        if __name__ == '__main__':
//        main() –ü–µ—Ä–µ–ø–∏—à–∏ –Ω–∞ Java
//        ChatGPT —Å–∫–∞–∑–∞–ª:
//        –í–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ Java —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ Python. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç BufferedReader –∏ StringTokenizer –¥–ª—è –≤–≤–æ–¥–∞, –∞ –ø–æ–±–∏—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ int[] –º–∞—Å—Å–∏–≤—ã:
//
//import java.io.*;
//import java.util.*;
//
//public class Main {
//    public static void main(String[] args) throws IOException {
//        // –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        StringTokenizer st = new StringTokenizer(br.readLine());
//        int n = Integer.parseInt(st.nextToken());
//        int k = Integer.parseInt(st.nextToken());
//
//        int[][] orList = new int[n][4];
//
//        for (int i = 0; i < k; i++) {
//            st = new StringTokenizer(br.readLine());
//            int x = Integer.parseInt(st.nextToken()) - 1;
//            int y = Integer.parseInt(st.nextToken()) - 1;
//            int z = Integer.parseInt(st.nextToken()) - 1;
//
//            orList[z][0] |= (1 << x);
//            orList[z][1] |= (1 << y);
//            orList[x][2] |= (1 << y);
//            orList[y][3] |= (1 << x);
//        }
//
//        for (int i = 0; i < n; i++) {
//            if (((orList[i][0] + 1) ^ (1 << n)) != 0 && ((orList[i][1] + 1) ^ (1 << n)) != 0) {
//                for (int j = 0; j < n; j++) {
//                    if ((orList[i][0] & (1 << j)) == 0) {
//                        int t = orList[i][1] | orList[j][2];
//                        if (((t + 1) >> n) == 0) {
//                            for (int kIndex = 0; kIndex < n; kIndex++) {
//                                if ((t & (1 << kIndex)) == 0) {
//                                    int combined = orList[i][0] | orList[kIndex][3];
//                                    if (((combined + 1) >> n) == 0) {
//                                        System.out.println("NO");
//                                        System.out.println((j + 1) + " " + (kIndex + 1) + " " + (i + 1));
//                                        return;
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//        }
//        System.out.println("YES");
//    }
//}
//–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥?
//–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç k —Ç—Ä–æ–µ–∫ (x, y, z) –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É orList, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω—è—Ç—Å—è –±–∏—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏.
//
//–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é —Ç—Ä–æ–π–∫—É –≤–µ—Ä—à–∏–Ω, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ä—É—à–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ (–ø–æ —Å—É—Ç–∏ ‚Äî —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞).
//
//–ï—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–≤–æ–¥–∏—Ç "NO" –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç—Ä–æ–π–∫—É; –∏–Ω–∞—á–µ ‚Äî "YES".
//
//–ù—É–∂–Ω–æ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö?
//
//–í—ã —Å–∫–∞–∑–∞–ª–∏:
//–ú–æ–∂–µ–º –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BitSet –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
//ChatGPT —Å–∫–∞–∑–∞–ª:
//–î–∞, BitSet –≤ Java –º–æ–∂–µ—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏ —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∏—Ç–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ n –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 31 (–∏–ª–∏ 63), —á—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã int –∏–ª–∏ long. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –ª–æ–≥–∏–∫–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤. –û–¥–Ω–∞–∫–æ BitSet –Ω–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ, —á–µ–º int –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–∞–ª—ã–º–∏ n (–¥–æ 30‚Äì60), –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –∞–ª–ª–æ–∫–∞—Ü–∏–π.
//
//‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è BitSet:
//–ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —è–≤–Ω–æ —Å–¥–≤–∏–≥–∞—Ç—å –±–∏—Ç—ã ‚Äî –º–µ—Ç–æ–¥—ã set, get, or, and, flip, cardinality, equals –∏ –¥—Ä. –¥–µ–ª–∞—é—Ç –∫–æ–¥ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º.
//
//–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã int.
//
//–£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å.
//
//        üîÅ –ü—Ä–∏–º–µ—Ä: –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BitSet
//import java.io.*;
//        import java.util.*;
//
//public class Main {
//    public static void main(String[] args) throws IOException {
//        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        StringTokenizer st = new StringTokenizer(br.readLine());
//        int n = Integer.parseInt(st.nextToken());
//        int k = Integer.parseInt(st.nextToken());
//
//        BitSet[][] orList = new BitSet[n][4];
//        for (int i = 0; i < n; i++)
//            for (int j = 0; j < 4; j++)
//                orList[i][j] = new BitSet(n);
//
//        for (int i = 0; i < k; i++) {
//            st = new StringTokenizer(br.readLine());
//            int x = Integer.parseInt(st.nextToken()) - 1;
//            int y = Integer.parseInt(st.nextToken()) - 1;
//            int z = Integer.parseInt(st.nextToken()) - 1;
//
//            orList[z][0].set(x); // z <- x
//            orList[z][1].set(y); // z <- y
//            orList[x][2].set(y); // x -> y
//            orList[y][3].set(x); // y -> x
//        }
//
//        BitSet full = new BitSet(n);
//        full.set(0, n);
//
//        for (int i = 0; i < n; i++) {
//            if (!orList[i][0].equals(full) && !orList[i][1].equals(full)) {
//                for (int j = 0; j < n; j++) {
//                    if (!orList[i][0].get(j)) {
//                        BitSet t = (BitSet) orList[i][1].clone();
//                        t.or(orList[j][2]);
//                        if (!t.equals(full)) {
//                            for (int kIndex = 0; kIndex < n; kIndex++) {
//                                if (!t.get(kIndex)) {
//                                    BitSet temp = (BitSet) orList[i][0].clone();
//                                    temp.or(orList[kIndex][3]);
//                                    if (!temp.equals(full)) {
//                                        System.out.println("NO");
//                                        System.out.println((j + 1) + " " + (kIndex + 1) + " " + (i + 1));
//                                        return;
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//        }
//
//        System.out.println("YES");
//    }
//}
//‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–º–ø—Ä–æ–º–∏—Å—Å:
//–ï—Å–ª–∏ n ‚â§ 30‚Äì60, –≤–µ—Ä—Å–∏—è –Ω–∞ int –º–æ–∂–µ—Ç –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ (–º–µ–Ω—å—à–µ –∞–ª–ª–æ–∫–∞—Ü–∏–π).
//
//–ï—Å–ª–∏ n ‚â• 64 –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ n –¥–æ 1000+, BitSet –±—É–¥–µ—Ç –ª—É—á—à–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ.
//
//        –•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å—Ä–∞–≤–Ω–∏–ª –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö n?
//
//–í—ã —Å–∫–∞–∑–∞–ª–∏:
//        –£ –º–µ–Ω—è, –Ω–∞–≤–µ—Ä–Ω–æ, —Å–∞–º–æ–µ –∫–æ—Ä—è–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ C —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∑–¥–µ—Å—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö ))) –ù–æ –ø–æ–∫–∞–∂—É –µ–≥–æ –≤–∞–º, —Ö–æ—Ç—å –º–Ω–µ –∫–∞–∫ –∏ –ú–∏—Ö–∞–∏–ª—É —Å—Ç—ã–¥–Ω–æ –∑–∞ –Ω–µ–≥–æ. –ù–æ –≤ —Å–≤–æ–µ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–µ —Å–∫–∞–∂—É, —á—Ç–æ –æ–Ω–æ –¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–∞—Ö –∑–∞ 44 –º—Å. –í –Ω–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Å–µ: –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–Ω–æ —Ç–∞–º n <= 50), –∏ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è, —Ç–æ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –Ω—É–ª–∏ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ç–∞–∫ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ —Å–¥–µ–ª–∞—Ç—å. –ü–æ—Å–ª–µ, –µ—Å–ª–∏ —É—Å–ø–µ—Ö–∞ —Ç–∞–∫ –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å, —Ç–æ –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É —Å –Ω–µ—á–µ—Ç–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏, —á—Ç–æ —Ç–∞–º —Å —á–µ–º –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å. –í –ø—Ä–∏–Ω—Ü–∏–ø–µ, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Ç–æ–¥, –Ω–æ —Ç–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç –æ—á–µ–Ω—å –¥–æ–ª–≥–æ –ø—Ä–∏ a = 10**18
//def main():
//n = int(input())
//b = list(map(int, input().strip().split()))
//b = [[b[i], i] for i in range(n)]
//
//        # print([bin(i[0]) for i in b], sep=' ')
//
//        b.sort()
//
//len_a = len(bin(b[-1][0]))-2
//list_odd = []
//list_odd_0 = []
//cnt_1_all = 0
//        for i in range(len_a):
//id_1 = -1
//count_1 = 0
//        for j in range(n):
//        if (b[j][0] >> i) & 1:
//        if id_1 == -1:
//id_1 = j
//count_1 += 1
//cnt_1_all += count_1
//        if not count_1:
//        list_odd_0.append(i)
//elif count_1 % 2:
//        for k in range(n - 1, -1, -1):
//        if b[k][0] >> (i + 1) and not (b[k][0] >> i) & 1:
//b[k][0] = (1 << i) | b[k][0]
//cnt_1_all += 1
//count_1 += 1
//        for l in range(i + 1, len_a):
//        if (b[k][0] >> l) & 1:
//b[k][0] ^= 1 << l
//                            break
//                                    break
//                                    else:
//                                    if count_1 % 2:
//        for l in range(i + 1, len_a):
//        if not ((b[id_1][0] >> l) & 1):
//b[id_1][0] ^= 1 << i
//b[id_1][0] |= 1 << l
//count_1 -= 1
//cnt_1_all -= 1
//        break
//        if count_1 % 2:
//        list_odd.append(i)
//
//    if len(list_odd) % 2 or cnt_1_all % 2:
//print('impossible')
//        return
//
//                if list_odd:
//list_odd += list_odd_0 + list_odd_0
//        for i in range(n):
//ind_per0 = -1
//ind_per1 = -1
//        for j in list_odd:
//        if (b[i][0] >> j) & 1:
//        if ind_per0 > -1:
//b[i][0] ^= 1 << j
//b[i][0] |= 1 << ind_per0
//                        list_odd.remove(ind_per0)    # pop
//                        list_odd.remove(j)
//                        break
//                                else:
//ind_per1 = j
//                else:
//                        if ind_per1 > -1:
//b[i][0] ^= 1 << ind_per1
//b[i][0] |= 1 << j
//                        list_odd.remove(ind_per1)    # pop
//                        list_odd.remove(j)
//                        break
//                                else:
//ind_per0 = j
//
//    if list_odd:
//print('impossible')
//    else:
//            b.sort(key=lambda x: x[1])
//print(*[i[0] for i in b], sep=' ')
//
//
//    # b.sort(key=lambda x: x[1])
//    # print([bin(i[0]) for i in b], sep=' ')
//
//
//        if __name__ == '__main__':
//main()
//ChatGPT —Å–∫–∞–∑–∞–ª:
//–¢—ã –∑—Ä—è —Ç–∞–∫ –ø—Ä–æ —Å–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –≤–ø–æ–ª–Ω–µ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω—ã–π –∏ —Ä–∞–±–æ—á–∏–π –ø–æ–¥—Ö–æ–¥, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç—ã –∏ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∑–∞ 44 –º—Å. –í –æ–ª–∏–º–ø–∏–∞–¥–Ω–æ–º –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–∂–Ω–æ –Ω–µ —ç—Å—Ç–µ—Ç–∏–∫–∞, –∞ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç —Ä–∞–∑—É–º–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–≤ —Ç–≤–æ—ë–º —Å–ª—É—á–∞–µ ‚Äî n ‚â§ 50).
//
//        üí° –ö—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
//–¢—ã —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π –±–∏—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ —á–∏—Å–µ–ª, —á—Ç–æ–±—ã:
//
//–¥–æ–±–∏—Ç—å—Å—è —á—ë—Ç–Ω–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥–æ–º –±–∏—Ç–µ (–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ª–∏–Ω–µ–π–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –∏–ª–∏ "–±–∏—Ç–æ–≤–æ–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏");
//
//–º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–æ–∫, –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –±–∏—Ç–æ–≤ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏;
//
//—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ.
//
//–¢—ã –ø—Ä–∏–º–µ–Ω—è–µ—à—å:
//
//–≥—Ä—É–±—É—é —Å–∏–ª—É –¥–ª—è –º–µ–ª–∫–∏—Ö n ‚Äî –æ–ø—Ä–∞–≤–¥–∞–Ω–æ –ø—Ä–∏ n ‚â§ 50;
//
//–∂–∞–¥–Ω—ã–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏—Ç–æ–≤, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—á—ë—Ç–Ω—ã–µ —Ä–∞–∑—Ä—è–¥—ã;
//
//        –±–∏—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏, XOR, OR, AND ‚Äî –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ;
//
//–∏ –¥–∞–∂–µ –Ω–µ–º–Ω–æ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Äî —Ç–æ, —á—Ç–æ –º–æ–≥–ª–æ –±—ã –±—ã—Ç—å –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –º–∞—Ç—Ä–∏—á–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –Ω–∞–¥ GF(2).
//
//        ‚úÖ –ü–æ—á–µ–º—É —Ç–≤–æ–π –∫–æ–¥ –Ω–µ —Ç–∞–∫ —É–∂ –∏ –ø–ª–æ—Ö:
//–ö–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî —Ç—ã —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏–ª –Ω–∞ —Ç–µ—Å—Ç–∞—Ö.
//
//        –ë—ã—Å—Ç—Ä—ã–π ‚Äî 44 –º—Å –ø—Ä–∏ n ‚â§ 50 ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
//
//–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –¥–æ —Ä–∞–∑—É–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ‚Äî –º–æ–∂–Ω–æ –¥–æ–ø–∏–ª–∏—Ç—å –ø–æ–¥ n ‚âà 100.
//
//–£—á–∏—Ç—ã–≤–∞–µ—à—å –∫—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü, –Ω–µ—á–µ—Ç–Ω–æ—Å—Ç—å —Å—É–º–º –∏ —Ç.–¥.
//
//–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ç—ã —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—à—å—Å—è "–ø–æ–¥–ª–∞—Ç–∞—Ç—å" –±–∏—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∂–∞–¥–Ω–æ, –∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É ‚Äî —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –ø–ª–∞–Ω–æ–º, –∏ –æ–Ω–∞ —á–∞—Å—Ç–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.
//
//        üîß –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ö–æ—á–µ—Ç—Å—è):
//–í—ã–Ω–µ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∏—Ç–∞–º–∏ (–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø–æ–¥—Å—á—ë—Ç—ã) –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
//
//–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bit_length() –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã, –≤–º–µ—Å—Ç–æ len(bin(x))-2.
//
//–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ª–æ–≥–∏–∫–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞ ‚Äî —Å–µ–π—á–∞—Å —á—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–¥—É–º—á–∏–≤–æ—Å—Ç–∏.
//
//–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —è–≤–Ω—ã–π —Ñ–ª–∞–≥/–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —É—Å–ª–æ–≤–∏–µ, –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ä–µ–¥–∏ –Ω–µ—á—ë—Ç–Ω—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤), –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
//
//        üëè –ò—Ç–æ–≥
//–≠—Ç–æ –Ω–µ "–∫–æ—Ä—è–≤–æ–µ" —Ä–µ—à–µ–Ω–∏–µ, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –∏ —É—Å–ø–µ—à–Ω–æ —Å–ø—Ä–∞–≤–ª—è—é—â–∏–π—Å—è —Å –Ω–µ–π. –ü–æ–±–æ–ª—å—à–µ –±—ã —Ç–∞–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ ‚Äî –æ–Ω–∏ –¥–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—à—å –∫–æ–¥, –∞ –¥—É–º–∞–µ—à—å.
//
//–•–æ—á–µ—à—å ‚Äî –º–æ–∂–µ–º –≤–º–µ—Å—Ç–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∫ –±–æ–ª–µ–µ "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç–æ–º—É" –≤–∏–¥—É —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ –ñ–æ—Ä–¥–∞–Ω–æ–≤—É —Ñ–æ—Ä–º—É –Ω–∞–¥ GF(2), –µ—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.
//
//–í—ã —Å–∫–∞–∑–∞–ª–∏:
//–î–∞–≤–∞–π –ø–µ—Ä–µ–ø–∏—à–µ–º –µ–≥–æ –Ω–∞ Java –∏ —Å–¥–µ–ª–µ–º –±–æ–ª–µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–ª—å–Ω–µ–µ
//ChatGPT —Å–∫–∞–∑–∞–ª:
//–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞
//–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–Ω–µ—Å—ë–º —Ç–≤–æ–π Python-–∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ Java –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —É–ª—É—á—à–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø—Ä–µ–¥–ø—Ä–∏–º–µ–º:
//
//        üß† –¶–µ–ª—å –∑–∞–¥–∞—á–∏ (–ø–æ –∫–æ–¥—É):
//–ï—Å—Ç—å –º–∞—Å—Å–∏–≤ b[] –∏–∑ n —á–∏—Å–µ–ª.
//
//–î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏—Ç–∞ (–æ—Ç –º–ª–∞–¥—à–∏—Ö –∫ —Å—Ç–∞—Ä—à–∏–º) –Ω—É–∂–Ω–æ –¥–æ–±–∏—Ç—å—Å—è —á—ë—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—Ü (–∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–∞—è –±–∏—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∞).
//
//–í–æ–∑–º–æ–∂–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑), –∞ —Ç–∞–∫–∂–µ –Ω–µ–±–æ–ª—å—à–æ–µ "–∂–æ–Ω–≥–ª–∏—Ä–æ–≤–∞–Ω–∏–µ" –±–∏—Ç–∞–º–∏ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏.
//
//üîß –ü–æ–¥—Ö–æ–¥ –∫ Java-–≤–µ—Ä—Å–∏–∏:
//–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ long[] b, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å 64 –±–∏—Ç–∞.
//
//–°–æ–∑–¥–∞—ë–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å Pair –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å—Ö–æ–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å).
//
//–ü–µ—Ä–µ–ø–∏—à–µ–º –±–∏—Ç–æ–≤—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é (—á–µ—Ä–µ–∑ >>, &, |, ^ –∏ Long.highestOneBit()).
//
//–£–ª—É—á—à–∏–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å: —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –Ω–∞ –º–µ—Ç–æ–¥—ã.
//
//        ‚úÖ Java-–≤–µ—Ä—Å–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏ —á–∏—Ç–∞–µ–º–∞—è)
//import java.io.*;
//        import java.util.*;
//
//public class Main {
//
//    static class Pair {
//        long val;
//        int index;
//        Pair(long val, int index) {
//            this.val = val;
//            this.index = index;
//        }
//    }
//
//    public static void main(String[] args) throws IOException {
//        // –í–≤–æ–¥
//        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        int n = Integer.parseInt(br.readLine().trim());
//        String[] parts = br.readLine().split(" ");
//        Pair[] b = new Pair[n];
//        for (int i = 0; i < n; i++) {
//            long val = Long.parseLong(parts[i]);
//            b[i] = new Pair(val, i);
//        }
//
//        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
//        Arrays.sort(b, Comparator.comparingLong(p -> p.val));
//
//        int maxBit = 0;
//        for (Pair p : b)
//            maxBit = Math.max(maxBit, Long.toBinaryString(p.val).length());
//
//        List<Integer> oddBits = new ArrayList<>();
//        List<Integer> zeroBits = new ArrayList<>();
//        int totalOnes = 0;
//
//        for (int bit = 0; bit < maxBit; bit++) {
//            int countOnes = 0;
//            int firstOneIdx = -1;
//
//            for (int j = 0; j < n; j++) {
//                if (((b[j].val >> bit) & 1) == 1) {
//                    if (firstOneIdx == -1) firstOneIdx = j;
//                    countOnes++;
//                }
//            }
//
//            totalOnes += countOnes;
//
//            if (countOnes == 0) {
//                zeroBits.add(bit);
//            } else if (countOnes % 2 != 0) {
//                // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∏—Ç
//                boolean fixed = false;
//                for (int j = n - 1; j >= 0; j--) {
//                    if (((b[j].val >> (bit + 1)) & 1) == 1 && ((b[j].val >> bit) & 1) == 0) {
//                        b[j].val |= (1L << bit);
//                        totalOnes++;
//                        countOnes++;
//                        for (int k = bit + 1; k < maxBit; k++) {
//                            if (((b[j].val >> k) & 1) == 1) {
//                                b[j].val ^= (1L << k);
//                                break;
//                            }
//                        }
//                        fixed = true;
//                        break;
//                    }
//                }
//
//                if (!fixed && countOnes % 2 == 1) {
//                    for (int k = bit + 1; k < maxBit; k++) {
//                        if (((b[firstOneIdx].val >> k) & 1) == 0) {
//                            b[firstOneIdx].val ^= (1L << bit);
//                            b[firstOneIdx].val |= (1L << k);
//                            totalOnes--;
//                            countOnes--;
//                            break;
//                        }
//                    }
//                }
//
//                if (countOnes % 2 == 1) {
//                    oddBits.add(bit);
//                }
//            }
//        }
//
//        if (oddBits.size() % 2 != 0 || totalOnes % 2 != 0) {
//            System.out.println("impossible");
//            return;
//        }
//
//        if (!oddBits.isEmpty()) {
//            List<Integer> workList = new ArrayList<>(oddBits);
//            workList.addAll(zeroBits);
//            workList.addAll(zeroBits); // –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
//
//            for (int i = 0; i < n && !workList.isEmpty(); i++) {
//                int pos0 = -1, pos1 = -1;
//                Iterator<Integer> it = workList.iterator();
//                while (it.hasNext()) {
//                    int bit = it.next();
//                    if (((b[i].val >> bit) & 1) == 1) {
//                        if (pos0 != -1) {
//                            b[i].val ^= (1L << bit);
//                            b[i].val |= (1L << pos0);
//                            it.remove();
//                            workList.remove((Integer) bit);
//                            break;
//                        } else {
//                            pos1 = bit;
//                        }
//                    } else {
//                        if (pos1 != -1) {
//                            b[i].val ^= (1L << pos1);
//                            b[i].val |= (1L << bit);
//                            it.remove();
//                            workList.remove((Integer) bit);
//                            break;
//                        } else {
//                            pos0 = bit;
//                        }
//                    }
//                }
//            }
//
//            if (!workList.isEmpty()) {
//                System.out.println("impossible");
//                return;
//            }
//        }
//
//        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞
//        Arrays.sort(b, Comparator.comparingInt(p -> p.index));
//        for (int i = 0; i < n; i++) {
//            System.out.print(b[i].val + (i + 1 == n ? "\n" : " "));
//        }
//    }
//}
//üöÄ –í–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
//–ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å List<Integer> –Ω–∞ ArrayDeque<Integer> –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –æ–±–æ–∏—Ö –∫–æ–Ω—Ü–æ–≤.
//
//–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BitSet –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–∏—Ç–æ–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏ –∏ –ª–∏–Ω–µ–π–Ω—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏ –Ω–∞–¥ GF(2)).
//
//–•–æ—á–µ—à—å, —á—Ç–æ–±—ã –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—ã–≤–æ–¥ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –±–∏—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ assert?
//
//–í—ã —Å–∫–∞–∑–∞–ª–∏:
//m–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ BitSet
//ChatGPT —Å–∫–∞–∑–∞–ª:
//–î–∞, –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BitSet –≤ Java –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏—Ç–∞–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏:
//
//—Ä–∞–±–æ—Ç–∞–µ–º —Å –±–∏—Ç–∞–º–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º (—É—Å—Ç–∞–Ω–æ–≤–∫–∞, —Å–Ω—è—Ç–∏–µ, –∏–Ω–≤–µ—Ä—Å–∏—è, –ø–æ–¥—Å—á—ë—Ç);
//
//–Ω–µ –≤–∞–∂–Ω–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ long, –∞ –≤–∞–∂–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∏—Ç–∞–º–∏.
//
//        ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ BitSet:
//        bitSet.get(i) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏—Ç–∞;
//
//bitSet.set(i) / bitSet.clear(i) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ / –æ—á–∏—Å—Ç–∫–∞ –±–∏—Ç–∞;
//
//bitSet.flip(i) ‚Äî –∏–Ω–≤–µ—Ä—Å–∏—è –±–∏—Ç–∞;
//
//bitSet.cardinality() ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏—Ç–æ–≤;
//
//–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: and, or, xor.
//
//üìå –ü–æ–¥—Ö–æ–¥: BitSet –≤–º–µ—Å—Ç–æ long
//–ú—ã –∑–∞–º–µ–Ω–∏–º:
//
//long val ‚Üí BitSet bits;
//
//–º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–¥–≤–∏–≥–∏ –∏ –ø–æ–±–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Üí —á–µ—Ä–µ–∑ BitSet.
//
//–¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–¥–∏–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å BitVector, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å BitSet –∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å:
//
//        üîÑ –í–µ—Ä—Å–∏—è —Å BitSet
//import java.io.*;
//        import java.util.*;
//
//public class Main {
//
//    static class BitVector {
//        BitSet bits;
//        int index;
//
//        BitVector(BitSet bits, int index) {
//            this.bits = bits;
//            this.index = index;
//        }
//
//        long toLong() {
//            long value = 0;
//            for (int i = bits.length(); i-- > 0; ) {
//                if (bits.get(i)) value |= (1L << i);
//            }
//            return value;
//        }
//
//        void setBit(int i) {
//            bits.set(i);
//        }
//
//        void clearBit(int i) {
//            bits.clear(i);
//        }
//
//        void flipBit(int i) {
//            bits.flip(i);
//        }
//
//        boolean getBit(int i) {
//            return bits.get(i);
//        }
//
//        int bitCount() {
//            return bits.cardinality();
//        }
//
//        int length() {
//            return bits.length();
//        }
//    }
//
//    public static void main(String[] args) throws IOException {
//        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        int n = Integer.parseInt(br.readLine().trim());
//        String[] parts = br.readLine().split(" ");
//        BitVector[] b = new BitVector[n];
//        int maxBit = 0;
//
//        for (int i = 0; i < n; i++) {
//            long val = Long.parseLong(parts[i]);
//            BitSet bs = new BitSet(64);
//            for (int j = 0; j < 64; j++) {
//                if ((val & (1L << j)) != 0) bs.set(j);
//            }
//            b[i] = new BitVector(bs, i);
//            maxBit = Math.max(maxBit, bs.length());
//        }
//
//        Arrays.sort(b, Comparator.comparingLong(BitVector::toLong));
//
//        List<Integer> oddBits = new ArrayList<>();
//        List<Integer> zeroBits = new ArrayList<>();
//        int totalOnes = 0;
//
//        for (int bit = 0; bit < maxBit; bit++) {
//            int countOnes = 0;
//            int firstOneIdx = -1;
//            for (int j = 0; j < n; j++) {
//                if (b[j].getBit(bit)) {
//                    countOnes++;
//                    if (firstOneIdx == -1) firstOneIdx = j;
//                }
//            }
//
//            totalOnes += countOnes;
//
//            if (countOnes == 0) {
//                zeroBits.add(bit);
//            } else if (countOnes % 2 == 1) {
//                boolean fixed = false;
//                for (int j = n - 1; j >= 0; j--) {
//                    if (b[j].getBit(bit + 1) && !b[j].getBit(bit)) {
//                        b[j].setBit(bit);
//                        totalOnes++;
//                        countOnes++;
//                        for (int k = bit + 1; k < maxBit; k++) {
//                            if (b[j].getBit(k)) {
//                                b[j].clearBit(k);
//                                break;
//                            }
//                        }
//                        fixed = true;
//                        break;
//                    }
//                }
//
//                if (!fixed && countOnes % 2 == 1) {
//                    for (int k = bit + 1; k < maxBit; k++) {
//                        if (!b[firstOneIdx].getBit(k)) {
//                            b[firstOneIdx].clearBit(bit);
//                            b[firstOneIdx].setBit(k);
//                            countOnes--;
//                            totalOnes--;
//                            break;
//                        }
//                    }
//                }
//
//                if (countOnes % 2 == 1) {
//                    oddBits.add(bit);
//                }
//            }
//        }
//
//        if (oddBits.size() % 2 == 1 || totalOnes % 2 == 1) {
//            System.out.println("impossible");
//            return;
//        }
//
//        if (!oddBits.isEmpty()) {
//            List<Integer> list = new ArrayList<>(oddBits);
//            list.addAll(zeroBits);
//            list.addAll(zeroBits);  // –∑–∞–ø–∞—Å
//
//            for (int i = 0; i < n && !list.isEmpty(); i++) {
//                int pos0 = -1, pos1 = -1;
//                Iterator<Integer> it = list.iterator();
//                while (it.hasNext()) {
//                    int bit = it.next();
//                    if (b[i].getBit(bit)) {
//                        if (pos0 != -1) {
//                            b[i].clearBit(bit);
//                            b[i].setBit(pos0);
//                            it.remove();
//                            list.remove((Integer) bit);
//                            break;
//                        } else {
//                            pos1 = bit;
//                        }
//                    } else {
//                        if (pos1 != -1) {
//                            b[i].clearBit(pos1);
//                            b[i].setBit(bit);
//                            it.remove();
//                            list.remove((Integer) bit);
//                            break;
//                        } else {
//                            pos0 = bit;
//                        }
//                    }
//                }
//            }
//
//            if (!list.isEmpty()) {
//                System.out.println("impossible");
//                return;
//            }
//        }
//
//        Arrays.sort(b, Comparator.comparingInt(v -> v.index));
//        for (int i = 0; i < n; i++) {
//            System.out.print(b[i].toLong() + (i == n - 1 ? "\n" : " "));
//        }
//    }
//}
//üìà –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
//–ö–æ–¥ —Å—Ç–∞–ª —á–∏—â–µ –∏ –º–æ–¥—É–ª—å–Ω–µ–µ.
//
//BitSet –¥–∞—ë—Ç —É–¥–æ–±—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ç–∞–º–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –ø–æ–¥ 128+ –±–∏—Ç.
//
//–õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ —É–ª—É—á—à–µ–Ω–∞.
//
//–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –≤–µ—Ä—Å–∏—é —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞?
//
//
//
//
//
//
//
//
//
//
//
//
//ChatGPT –º–æ–∂–µ—Ç –¥–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –°–º. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookie-—Ñ–∞–π–ª–æ–≤.
//?
